{"id":"ejercicios/prototypal-inheritance.html","dependencies":[{"name":"E:\\Platzi\\Curso Profesional de JavaScript\\mediaplayer\\package.json","includedInParent":true,"mtime":1622145159002}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Prototypal-inheritance</title>\r\n</head>\r\n<body>\r\n  <a href=\"/Ejercicios/\">Go back</a>\r\n  <p><em>Abre la consola</em></p>\r\n  \r\n  <h1>\r\n    <code>SomeObject.prototype</code> es un objeto donde definimos el prototipo de las\r\n    instancias de <code>SomeObject</code>. Es decir, las instancias de <code>SomeObjetc</code>\r\n    van a \"heredar\" de <code>SomeObject.prototype</code>.\r\n    <br><br>\r\n    <code>SomeObject.[[Prototype]]</code> es el prototipo de <code>SomeObject</code>. Es\r\n    decir, <code>SomeObject</code> \"hereda\" de <code>SomeObject.prototype</code>.\r\n  </h1>\r\n\r\n  <script>function Hero(name) {\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`Hola, soy ${this.name}.`);\n};\n\nconst zelda = new Hero('Zelda'); // propiedades de la instancia\n\nconsole.log('Name: ', zelda.name); // propiedades de la \"clase\"\n\nconsole.log('Saludar: ', zelda.saludar); // propiedades heredadas ej: toString\n\nconsole.log('toString: ', zelda.toString); // hasOwnProperty (de d√≥nde sale toString o esto?)\n\nconsole.log('zelda.hasOwnProperty(\"saludar\"): ', zelda.hasOwnProperty(\"saludar\")); // inspeccionemos el prototipo del zelda\n// inspeccionemos el prototipo del Hero\n// inspeccionemos el prototipo del Object</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"1c365123fa6e0aede44c45504252cbb6","cacheData":{"env":{}}}